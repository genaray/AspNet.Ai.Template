# Security Notes (For later)
# No latest (Unplanned up/down grades or chain hijacking)
# Secrets not as clear text 
# Dbs should not be accessible from outside
# Prevent container running as root to prevent breakouts (hardened images, ...)
# Limit resources, otherwhise a container could eat up all resources (DoS)
# Requires App-Layer-Auth (Reverse-Proxy, Network-Policies so only grafana can access tempo, loki, prometheus)
# Destroy unused Health-Check containers 
# Volumes RO by default (Otherwhise all container can change data)

version: '3.8'
services:
  
  # Auth-Service
  authentication-service:
    build:
      context: ../
      dockerfile: Docker/authentication.dockerfile
    image: authentication-service
    container_name: authentication-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:8080
      - ConnectionStrings__DefaultConnection=Host=authentication-postgres;Port=5432;Database=backend-db;Username=admin;Password=pw
    depends_on:
      authentication-postgres:
        condition: service_healthy
    ports:
      - "8080:8080"
        
  # Auth-Service Database
  authentication-postgres:
    image: postgres:latest
    container_name: authentication-postgres-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pw
      POSTGRES_DB: backend-db
    ports:
      - "5432:5432"
    volumes:
      - authentication_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 5s
      timeout: 5s
      retries: 5
        
  # User service
  user-service:
    build:
      context: ../
      dockerfile: Docker/user.dockerfile
    image: user-service
    container_name: user-service
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://*:8080
      - ConnectionStrings__DefaultConnection=Host=user-postgres;Port=5432;Database=backend-db;Username=admin;Password=pw
    depends_on:
      user-postgres:
        condition: service_healthy
    ports:
      - "8081:8080"
      
  # User-Service Database
  user-postgres:
    image: postgres:latest
    container_name: user-postgres-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: pw
      POSTGRES_DB: backend-db
    ports:
      - "5433:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin" ]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  authentication_postgres_data:
  user_postgres_data:

