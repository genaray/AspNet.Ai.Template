---
- name: Configure macOS development host
  hosts: macs
  gather_facts: yes  # Automatic variables for OS detection, environment etc
  become: no         # No privileges 

  vars:
    dotnet_sdk_cask: dotnet-sdk            # Homebrew cask for .NET SDK (will install latest, currently .NETÂ 8)
    node_Privilegpackage: node             # Homebrew package for Node.js + npm
    docker_cask: docker                    # Homebrew cask for Docker Desktop

    # Path to Docker Desktop settings
    docker_settings: "{{ lookup('env','HOME') }}/Library/Group Containers/group.com.docker/settings-store.json"

  tasks:

    # Ensure homebrew
    - name: Ensure Homebrew is installed
      raw: |
        which brew >/dev/null 2>&1 || \
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # Add homebrew to path
    - name: Add Homebrew to PATH for this session
      set_fact:
        ansible_env:
          PATH: "/usr/local/bin:/opt/homebrew/bin:{{ ansible_env.PATH }}"

    # Install .net 8
    - name: Install .NET SDK 8
      homebrew:
        name: "{{ dotnet_sdk_cask }}"
        state: present
        install_options: [--cask]  # Comes with a graphical setup, to we use cask to skip that

    # Install node
    - name: Install Node.js & npm
      homebrew:
        name: "{{ node_package }}"
        state: present

    # Install docker desktop
    - name: Install Docker Desktop
      homebrew:
        name: "{{ docker_cask }}"
        state: present
        install_options: [--cask]

    # Launch docker
    - name: Launch Docker Desktop (if not running)
      shell: |
        open -a Docker
      args:
        creates: /private/var/run/docker.sock  # Only launch if not already launched

    # Wait for docker and setup
    - name: Wait until Docker daemon responds
      command: docker info
      register: docker_ready                   # Saves result in this variable
      retries: 10                              # Try it a couple of times
      delay: 3
      until: docker_ready.rc == 0              # Until docker reports ready

    # Backup docker settings
    - name: Backup Docker settings
      copy:
        src: "{{ docker_settings }}"
        dest: "{{ docker_settings }}.bak"
        remote_src: yes
      when: docker_ready.rc == 0               # Idopotem, only when docker is ready 

    # Enable kubernetes (kubeadm) by replacing a value in the docker settings
    - name: Enable Kubernetes in Docker Desktop settings
      replace:
        path: "{{ docker_settings }}"
        regexp: '("kubernetesEnabled"\s*:\s*)(false|null|\d+)'
        replace: '\1true'
      register: kubernetes_flag
      when: docker_ready.rc == 0

    # Restart docker to apply changes
    - name: Restart Docker to apply Kubernetes setting
      shell: |
        osascript -e 'tell application "Docker" to quit'
        sleep 5
        open -a Docker
      when: docker_ready.rc == 0 and kubernetes_flag.changed

